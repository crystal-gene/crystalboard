{"version":3,"sources":["utils.jsx","left_panel.jsx","stage.jsx","right_panel.jsx","index.jsx"],"names":["useWindowDimensions","getWindowDimensions","window","width","innerWidth","height","innerHeight","useState","windowDimensions","setWindowDimensions","useEffect","handleResize","addEventListener","removeEventListener","getTracList","url","a","fetch","tracList","json","tracJson","getStepFile","stepUrl","metadataUrl","run","tag","URLSearchParams","metadataList","metadataJson","structures","stepMetadata","makeStyles","theme","redText","fontColor","greenText","useStyles","drawerPaper","backgroundColor","drawer","flexShrink","list","overflowY","margin","padding","title","iconRoot","minWidth","listGutters","paddingLeft","paddingRight","listItem","paddingTop","paddingBottom","h6","textWeight","fontSize","DataRow","index","data","style","classes","nameList","ListItem","button","dense","root","gutters","onClick","handleUpdate","ListItemIcon","Radio","checked","checkedIndex","value","name","size","ListItemText","primary","length","slice","secondary","LeftPanel","Drawer","variant","className","paper","Typography","Divider","itemData","itemCount","itemSize","main","flexGrow","spacing","container","display","flexDirection","gridContainer","flex","marginTop","marginBottom","crystalPaper","crystalContainer","justifyContent","alignItems","metadataPanel","metadataTitle","MetadataPanel","restoredKeys","Card","elevation","CardContent","summary","verticalAlign","fromInit","stepIndex","toFinal","Object","keys","map","key","includes","Crystal3D","options","Paper","debug","animation","axisView","inletPadding","sceneSize","toggleVisibility","Stage","crystal1","crystal2","metadata","Grid","justify","item","xs","color","buttonsContainer","buttonList","summaryButton","borderRadius","StepButton","step","currentStepIndex","columnIndex","rowIndex","steps","Tooltip","placement","Button","RightPanel","updateFunction","anchor","columnCount","columnWidth","drawerWidth","rowCount","Math","ceil","rowHeight","BASE_URL","urls","stepFile","App","isLoad","useRef","setTracList","setStepFile","setCrystal1","setCrystal2","setMetadata","currentIndex","setIndex","setStepIndex","useCallback","action","Error","current","fetchTrac","fetchStep","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1004d281.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nexport function useWindowDimensions() {\r\n    \r\n    function getWindowDimensions() {\r\n        const { innerWidth: width, innerHeight: height } = window;\r\n        return {\r\n            width,\r\n            height\r\n        };\r\n    }\r\n    const [windowDimensions, setWindowDimensions] = useState(getWindowDimensions());\r\n\r\n    useEffect(() => {\r\n        function handleResize() {\r\n            setWindowDimensions(getWindowDimensions());\r\n        }\r\n\r\n        window.addEventListener('resize', handleResize);\r\n        return () => window.removeEventListener('resize', handleResize);\r\n    }, []);\r\n\r\n    return windowDimensions;\r\n}\r\n\r\nexport async function getTracList(url) {\r\n    const tracList = await fetch(url);\r\n    const tracJson = await tracList.json()\r\n    return tracJson;\r\n}\r\n\r\nexport async function getStepFile(stepUrl, metadataUrl, run, tag) {\r\n    const tracList = await fetch(stepUrl + \"?\" + new URLSearchParams({\r\n        run: run,\r\n        tag: tag\r\n    }));\r\n    const tracJson = await tracList.json();\r\n    const metadataList = await fetch(metadataUrl + \"?\" + new URLSearchParams({\r\n        run: run,\r\n        tag: tag\r\n    }));\r\n    const metadataJson = await metadataList.json();\r\n    return {\r\n        structures: tracJson,\r\n        stepMetadata: metadataJson\r\n    };\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    redText: {\r\n        fontColor: \"#f44336\"\r\n    },\r\n    greenText: {\r\n        fontColor: \"#4caf50\"\r\n    }\r\n}));\r\n\r\nconst ColoredNumber = ({ number }) => {\r\n    const classes = useStyles();\r\n    return (\r\n        <span\r\n            className={number > 0 ? classes.greenText : classes.redText}\r\n        >\r\n            {`${number}`}\r\n        </span>\r\n    );\r\n};\r\n\r\nexport { ColoredNumber };\r\n","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { FixedSizeList as List } from 'react-window';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport Radio from '@material-ui/core/Radio';\r\nimport Drawer from '@material-ui/core/Drawer';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { useWindowDimensions } from './utils'\r\n\r\nconst drawerWidth = 300;\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    drawerPaper: {\r\n        width: drawerWidth,\r\n        height: \"100%\",\r\n        backgroundColor: \"rgba(0, 0, 0, 0.03)\"\r\n    },\r\n    drawer: {\r\n        width: drawerWidth,\r\n        flexShrink: 0\r\n      },\r\n    list: {\r\n        // height: \"calc(100% - (30px + 17px + 1px))\",\r\n        overflowY: \"auto\",\r\n        margin: 0,\r\n        padding: 0\r\n    },\r\n    title: {\r\n        margin: \"10px 20px\"\r\n    },\r\n    iconRoot: {\r\n        minWidth: \"30px\"\r\n    },\r\n    listGutters: {\r\n        paddingLeft: \"15px\",\r\n        paddingRight: \"0\",\r\n    },\r\n    listItem: {\r\n        margin: '0',\r\n        paddingTop: 0,\r\n        paddingBottom: 0\r\n    },\r\n    h6: {\r\n        textWeight: 300,\r\n        fontSize: '17px'\r\n    }\r\n}));\r\n\r\nconst LeftPanel = ({ checkedIndex, data, handleUpdate }) => {\r\n    const classes = useStyles();\r\n    const updateFunction = (index) => {\r\n        handleUpdate(\"trajectory\", index)\r\n    }\r\n    const { height } = useWindowDimensions();\r\n    return (\r\n        <Drawer\r\n            variant=\"permanent\"\r\n            className={classes.drawer}\r\n            classes={{\r\n                paper: classes.drawerPaper\r\n            }}\r\n        > \r\n            <div className={classes.title}>\r\n                <Typography \r\n                    variant=\"h6\"\r\n                    className={classes.h6}\r\n                >\r\n                    Trajectory List\r\n                </Typography>\r\n            </div>\r\n            <Divider />\r\n            <List\r\n                classes={{\r\n                    root: classes.list\r\n                }}\r\n                itemData={{\r\n                    nameList: data,\r\n                    checkedIndex: checkedIndex,\r\n                    handleUpdate: updateFunction\r\n                }}\r\n                itemCount={data.length}\r\n                itemSize={52}\r\n                height={height - (30 + 17 + 1)}\r\n                width={drawerWidth}\r\n            >\r\n                {DataRow}\r\n            </List>\r\n        </Drawer>\r\n    )\r\n}\r\n\r\nconst DataRow = ({ index, data, style }) => {\r\n    const classes = useStyles();\r\n    const tag = `${data.nameList[index].tag}`;\r\n    const run = `${data.nameList[index].run}`;\r\n\r\n    return (\r\n        <div style={style} key={`trajectory_${index}`}>\r\n            <ListItem \r\n                button \r\n                dense\r\n                classes={{\r\n                    root: classes.listItem,\r\n                    gutters: classes.listGutters\r\n                }}\r\n                onClick={() => {\r\n                    data.handleUpdate(index)\r\n                }}\r\n            >\r\n                <ListItemIcon classes={{\r\n                    root: classes.iconRoot\r\n                }}>\r\n                    <Radio\r\n                        checked={data.checkedIndex === index}\r\n                        value={`${index}`}\r\n                        name={tag}\r\n                        size=\"small\"\r\n                    />\r\n                </ListItemIcon>\r\n                <ListItemText \r\n                    primary={\r\n                        tag.length > 25 ? tag.slice(0, 25) + '...' : tag\r\n                    }\r\n                    secondary={\r\n                        run.length > 25 ? run.slice(0, 25) + '...' : run\r\n                    }\r\n                />\r\n            </ListItem>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default LeftPanel;","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { Simple3DSceneComponent } from '@materialsproject/mp-react-components'\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport ArrowForwardRoundedIcon from '@material-ui/icons/ArrowForwardRounded';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    main: {\r\n        flexGrow: 1,\r\n        paddingTop: theme.spacing(2),\r\n        paddingBottom: theme.spacing(2)\r\n    },\r\n    container: {\r\n        display: \"flex\",\r\n        flexDirection: \"column\"\r\n    },\r\n    gridContainer: {\r\n        flex: \"0 0 auto\",\r\n        marginTop: theme.spacing(3),\r\n        marginBottom: theme.spacing(2)\r\n    },\r\n    crystalPaper: {\r\n        width: \"fit-content\",\r\n        \"background-color\": \"rgba(0, 0, 0, 0.01)\"\r\n    },\r\n    crystalContainer: {\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        alignItems: 'center'\r\n    },\r\n    metadataPanel: {\r\n        flex: \"1 0 auto\",\r\n        margin: \"20px 40px\",\r\n    },\r\n    metadataTitle: {\r\n        marginBottom: 10\r\n    }\r\n}));\r\n\r\nconst Stage = ({ crystal1, crystal2, metadata }) => {\r\n    const classes = useStyles();\r\n    return (\r\n        <main className={classes.main}>\r\n            <div className={classes.container}>\r\n                <Grid container justify=\"center\" className={classes.gridContainer} spacing={2}>\r\n                    <Grid className={classes.crystalContainer} item xs={5}>\r\n                        <Crystal3D\r\n                            data={crystal1}\r\n                        />\r\n                    </Grid>\r\n                    <Grid className={classes.crystalContainer} item xs={1}>\r\n                        <ArrowForwardRoundedIcon \r\n                            style={{ fontSize: 40 }}\r\n                            color=\"action\"\r\n                        />\r\n                    </Grid>\r\n                    <Grid className={classes.crystalContainer} item xs={5}>\r\n                        <Crystal3D\r\n                            data={crystal2}\r\n                        />\r\n                    </Grid>\r\n                </Grid>\r\n                <MetadataPanel \r\n                    data={metadata}\r\n                />\r\n            </div>\r\n\r\n        </main>\r\n    )\r\n}\r\n\r\nconst MetadataPanel = ({ data }) => {\r\n    const classes = useStyles();\r\n    const restoredKeys = [\"stepIndex\", \"summary\", \"fromInit\", \"toFinal\"];\r\n    return (\r\n        <Card \r\n            elevation={3}\r\n            classes={{\r\n                root: classes.metadataPanel\r\n            }}\r\n        >\r\n            <CardContent>\r\n                {data.summary ? (\r\n                    <Typography className={classes.metadataTitle} variant=\"h5\">\r\n                        Initial state \r\n                        <ArrowForwardRoundedIcon style={{verticalAlign: 'middle'}}/> \r\n                        Final state (Summary)\r\n                    </Typography>\r\n                ) : (\r\n                    <Typography className={classes.metadataTitle}  variant=\"h5\">\r\n                        {data.fromInit ? `Initial state (${data.stepIndex})` : `state ${data.stepIndex}`}\r\n                            <ArrowForwardRoundedIcon style={{verticalAlign: 'middle'}}/> \r\n                            {data.toFinal ? `final state (${data.stepIndex+1})` : `state ${data.stepIndex+1}`}\r\n                    </Typography>\r\n                )}\r\n                {\r\n                    Object.keys(data).map((key) => restoredKeys.includes(key) ? <></> : (\r\n                        <Typography key={`metadata_${key}`} variant=\"body1\">\r\n                            <b>{key}</b>: {`${data[key]}`}\r\n                        </Typography>\r\n                    ))\r\n                }\r\n            </CardContent>\r\n        </Card>\r\n    )\r\n}\r\n\r\nconst Crystal3D = ({ data, size=350, options={} }) => {\r\n    // https://github.com/materialsproject/mp-react-components/blob/master/src/components/crystal-toolkit/Simple3DScene/Simple3DSceneComponent.react.tsx#L178\r\n    const classes = useStyles();\r\n    return (\r\n        <Paper\r\n            variant=\"outlined\"\r\n            classes={{\r\n                root: classes.crystalPaper\r\n            }}\r\n            elevation={5}\r\n        >\r\n            <Simple3DSceneComponent\r\n                data={data}\r\n                debug={false}\r\n                animation={'none'}\r\n                axisView={'SW'}\r\n                inletPadding={10}\r\n                sceneSize={size}\r\n                toggleVisibility={{}}\r\n                {...options}\r\n            />\r\n        </Paper>\r\n    )\r\n}\r\n\r\n// eslint-disable-next-line\r\nconst test_data = {name: \"StructureMoleculeComponentScene\",\r\n    contents: [{name: \"atoms_Na_1a\",\r\n        contents: [{positions: [[4.2, 4.2, 0.0],\r\n            [4.2, 0.0, 4.2],\r\n            [0.0, 0.0, 4.2],\r\n            [0.0, 4.2, 4.2],\r\n            [0.0, 4.2, 0.0],\r\n            [4.2, 0.0, 0.0],\r\n            [4.2, 4.2, 4.2],\r\n            [0.0, 0.0, 0.0]],\r\n            color: \"#f9dc3c\",\r\n            radius: 0.5,\r\n            type: \"spheres\",\r\n            tooltip: \"Na (1a)\",\r\n            clickable: true}],\r\n        origin: [-2.1, -2.1, -2.1],\r\n        visible: true}]\r\n}\r\n\r\n// eslint-disable-next-line\r\nconst test_data_2 = {\r\n    action: 'Modify Na at site 1 (0.0, 0.0, 0.0) to Mg',\r\n    reward: -0.3,\r\n    summary: false,\r\n    stepIndex: 3,\r\n    fromInit: true,\r\n    toFinal: false,\r\n    stepInterval: 1,\r\n    otherMetadata: []\r\n}\r\n\r\nexport default Stage;","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Drawer from '@material-ui/core/Drawer';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Button from '@material-ui/core/Button';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport { FixedSizeGrid as GridList } from 'react-window';\r\nimport { useWindowDimensions } from './utils'\r\n\r\nconst drawerWidth = 240;\r\nconst gridCol = 3;\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    drawerPaper: {\r\n        width: drawerWidth,\r\n        height: \"100%\",\r\n        backgroundColor: \"rgba(0, 0, 0, 0.03)\"\r\n    },\r\n    drawer: {\r\n        width: drawerWidth,\r\n        flexShrink: 0\r\n      },\r\n    list: {\r\n        height: \"400px\",\r\n        overflowY: \"auto\"\r\n    },\r\n    title: {\r\n        margin: \"10px 15px\",\r\n        justifyContent: \"space-between\",\r\n        alignItems: \"center\",\r\n        display: \"flex\"\r\n    },\r\n    iconRoot: {\r\n        minWidth: \"30px\"\r\n    },\r\n    listGutters: {\r\n        paddingLeft: \"15px\",\r\n        paddingRight: 0\r\n    },\r\n    h6: {\r\n        fontSize: '17px'\r\n    },\r\n    buttonsContainer: {\r\n        display: \"flex\",\r\n        justifyContent: \"center\"\r\n    },\r\n    buttonList: {\r\n        margin: \"4px 0 0 0\"\r\n    },\r\n    button: {\r\n        margin: \"3px\",\r\n        padding: 0,\r\n        width: 66,\r\n        height: 35\r\n    },\r\n    summaryButton: {\r\n        padding: \"16px 6px\",\r\n        width: 90,\r\n        height: 35,\r\n        borderRadius: 8,\r\n        fontSize: 12\r\n    }\r\n}));\r\n\r\nconst RightPanel = ({ currentStepIndex, steps, handleUpdate }) => {\r\n    const classes = useStyles();\r\n    const updateFunction = (stepIndex) => {\r\n        handleUpdate(\"step\", stepIndex)\r\n    }\r\n    const { height } = useWindowDimensions();\r\n    return (\r\n        <Drawer\r\n            variant=\"permanent\"\r\n            className={classes.drawer}\r\n            anchor=\"right\"\r\n            classes={{\r\n                paper: classes.drawerPaper\r\n            }}\r\n        > \r\n            <div className={classes.title}>\r\n                <Typography \r\n                    variant=\"h6\"\r\n                    className={classes.h6}\r\n                >\r\n                    Step List\r\n                </Typography>\r\n                <StepButton \r\n                    className={classes.summaryButton}\r\n                    summary={{\r\n                        index: steps.structures.length-1,\r\n                        step: \"summary\",\r\n                        currentStepIndex: currentStepIndex,\r\n                        handleUpdate: updateFunction\r\n                    }}\r\n                />\r\n            </div>\r\n            <Divider />\r\n            <div className={classes.buttonsContainer}>\r\n                <GridList \r\n                    className={classes.buttonList}\r\n                    itemData={{\r\n                        steps: steps.structures.length - 1,\r\n                        currentStepIndex: currentStepIndex,\r\n                        handleUpdate: updateFunction\r\n                    }}\r\n                    columnCount={gridCol}\r\n                    columnWidth={70}\r\n                    width={drawerWidth-10}\r\n                    rowCount={Math.ceil((steps.structures.length - 1) / gridCol)}\r\n                    rowHeight={40}\r\n                    height={height - (35 + 20 + 1 + 4)}\r\n                >\r\n                    {StepButton}\r\n                </GridList>\r\n            </div>\r\n        </Drawer>\r\n    )\r\n}\r\n\r\nconst StepButton = ({ columnIndex, rowIndex, style, data, summary=null }) => {\r\n    const classes = useStyles();\r\n    let index, step, handleUpdate, currentStepIndex;\r\n    if (summary !== null) {\r\n        index = summary.index;\r\n        step = `${summary.step}`;\r\n        handleUpdate = summary.handleUpdate;\r\n        currentStepIndex = summary.currentStepIndex;\r\n    } else {\r\n        index = rowIndex * gridCol + columnIndex;\r\n        step = index >= data.steps ? null : `${index+1}`;\r\n        handleUpdate = data.handleUpdate;\r\n        currentStepIndex = data.currentStepIndex\r\n    }\r\n\r\n    return (\r\n        step === null ? <></> : (\r\n            <div key={`step_${index}`} style={style}>\r\n                <Tooltip  title={summary === null ? `State ${index} → State ${index+1}` : ' Summary of the trajectory'} placement=\"bottom\">\r\n                    <Button\r\n                        className={summary === null ? classes.button : classes.summaryButton}\r\n                        variant={currentStepIndex === index ? \"contained\" : \"outlined\"}\r\n                        color={currentStepIndex === index ? (\r\n                            summary === null ? \"primary\" : \"secondary\"\r\n                        ) : (\r\n                            summary === null ? \"default\" : \"secondary\"\r\n                        )}\r\n                        onClick={() => {handleUpdate(index)}}\r\n                    >\r\n                        {step}\r\n                    </Button>\r\n                </Tooltip>\r\n            </div>\r\n        )\r\n    )\r\n}\r\n\r\nexport default RightPanel;","import React, { useState, useEffect, useCallback, useRef } from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport '@fontsource/roboto/400.css';\r\n\r\nimport LeftPanel from './left_panel';\r\nimport Stage from './stage';\r\nimport RightPanel from './right_panel';\r\nimport { getTracList, getStepFile } from './utils';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        display: 'flex'\r\n    }\r\n}));\r\n\r\nconst BASE_URL = '/data/plugin/crystal';\r\n\r\nconst urls = {\r\n    tracList: BASE_URL + '/tags',\r\n    stepFile: BASE_URL + '/step',\r\n    stepMetadata: BASE_URL + '/metadata'\r\n};\r\n\r\nfunction App() {\r\n    const classes = useStyles();\r\n\r\n    let isLoad = useRef(false);\r\n    const [ tracList, setTracList ] = useState([]);\r\n    const [ stepFile, setStepFile ] = useState({\r\n        structures: [],\r\n        stepMetadata: []\r\n    });\r\n    const [ crystal1, setCrystal1 ] = useState({});\r\n    const [ crystal2, setCrystal2 ] = useState({});\r\n    const [ metadata, setMetadata ] = useState({});\r\n\r\n    const [ currentIndex, setIndex ] = useState(0);\r\n    const [ currentStepIndex, setStepIndex ] = useState(null);\r\n\r\n    const handleUpdate = useCallback((action, value) => {\r\n        switch (action) {\r\n            case 'trajectory':\r\n                setIndex(value);\r\n                break;\r\n            case 'step':\r\n                setStepIndex(value);\r\n                if (value === stepFile.structures.length - 1) {\r\n                    setCrystal1(stepFile.structures[0]);\r\n                    setCrystal2(stepFile.structures[stepFile.structures.length - 1]);\r\n                    setMetadata({\r\n                        summary: true,\r\n                        fromInit: true,\r\n                        toFinal: true,\r\n                        stepIndex: value,\r\n                        ...stepFile.stepMetadata[value]\r\n                    })\r\n                } else {\r\n                    setCrystal1(stepFile.structures[value]);\r\n                    setCrystal2(stepFile.structures[value+1]);\r\n                    setMetadata({\r\n                        summary: false,\r\n                        fromInit: value === 0,\r\n                        toFinal: value === stepFile.structures.length - 2,\r\n                        stepIndex: value,\r\n                        ...stepFile.stepMetadata[value]\r\n                    })\r\n                }\r\n                break;\r\n            default:\r\n                throw new Error(`Unexpected action type: ${action}`);\r\n        }\r\n    }, [ stepFile ])\r\n\r\n    useEffect(() => {\r\n        const fetchTrac = async () => {\r\n            if (!isLoad.current) {\r\n                setTracList(\r\n                    await getTracList(urls.tracList)\r\n                );\r\n            }\r\n            isLoad.current = true;\r\n        };\r\n        fetchTrac()\r\n    }, [ isLoad ])\r\n\r\n    useEffect(() => {\r\n        const fetchStep = async () => {\r\n            if (tracList && tracList.length > currentIndex) {\r\n                setStepFile(\r\n                    await getStepFile(urls.stepFile, urls.stepMetadata, tracList[currentIndex].run, tracList[currentIndex].tag)\r\n                );\r\n            }\r\n        }\r\n        fetchStep();\r\n    }, [ currentIndex, tracList ])\r\n\r\n    useEffect(() => {\r\n        handleUpdate('step', stepFile.structures.length-1);\r\n    }, [ stepFile, handleUpdate ])\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <LeftPanel \r\n                data={tracList} \r\n                checkedIndex={currentIndex}\r\n                handleUpdate={handleUpdate}\r\n            />\r\n            <Stage \r\n                crystal1={crystal1} \r\n                crystal2={crystal2} \r\n                metadata={metadata}\r\n            />\r\n            <RightPanel \r\n                currentStepIndex={currentStepIndex} \r\n                steps={stepFile}\r\n                handleUpdate={handleUpdate}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <App />\r\n    </React.StrictMode>, \r\n    document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}